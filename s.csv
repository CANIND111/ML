x,y
Poisson dias ,"from scipy.stats import poisson, norm, binom, nbinom, geom  / 1.  lambda_param = 0.2857 #2/7 dias / x_poisson = 3/ poisson_prob = poisson.pmf(x_poisson, lambda_param) /print(""Poisson probability for x ="", x_poisson, "":"", poisson_prob)"
Poisson week ,"lambda_param = 2   / x_poisson = 1 / poisson_prob = poisson.pmf(x_poisson, lambda_param) / print(""Poisson probability for x ="", x_poisson, "":"", poisson_prob)"
negative binomal manual ,"p = 0.10    #10%    k = 10   #10couples    n = 30    #30trials  / import math / #formula poisson = (math.comb(n-1, k-1))*((p)**k)*((1-p)**n-k)  / a = (math.comb(29,9))*((0.10)**10)*((0.90)**20) /a"
negative binomial scipy,"from scipy.stats import nbinom / r = 10  # Number of successes / x = 20  # Number of failures before achieving the tenth success / p = 0.10  # Probability of success on each trial / nbinomial_prob = nbinom.pmf(x, r, p) / print(""Negative Binomial probability for x ="", x, "":"", nbinomial_prob)"
geometric,"p_geom = 0.35  #prob success / k_geom = 3 #trials  /geometric_prob = geom.pmf(k_geom, p_geom) /print(""Geometric probability for k ="", k_geom, "":"", geometric_prob) //// p_geom = 0.35 / k_geom = 10 #trials  / geometric_prob = geom.pmf(k_geom, p_geom) /print(""Geometric probability for k ="", k_geom, "":"", geometric_prob)"
standard errors,"import numpy as np / from scipy.stats import norm / p = 0.80  # Proportion of students who love statistics / n = 25  # Sample size /p_hat = n * p  # Expected number of students who love statistics in the sample / 
# Calculate standard error /standard_error = np.sqrt(p * (1 - p) / n) /standard_error  /#Limits  / upper_limit = (p + standard_error)*100 upper_limit /lower_limit = (p - standard_error)*100 lower_limit"
CLT success failure condition at least 10 successes 10 failures,"Sample size n > 30 , Success failure Sample size n*p >= 10 n(1-p) >= 10 .EXAMPLE n=1000 p = 0.88 / np= 1000*0.88 = 880 >=10 / n (1-p) = 1000(1-0.88) = 120 >= 10 , SI cumple la condicion.  Np and n(1-p) at least 10 a"
binomial,"from scipy.stats import poisson, norm, binom, nbinom, geom /n = 10  p = 0.5  k = 5 #k<5   binomial_prob = binom.cdf(k, n, p)  #k>5  1-binom.cdf  # k=2 pmf # cutt of binom.ppf  / print(""Binomial probability for k ="", k, "":"", binomial_prob)"
normal ,"from scipy.stats import poisson, norm, binom, nbinom, geom / mu = 0  std = 1   z = 0.6   normal_prob = norm.cdf(z, mu, std)   #z>0.6 = 1-norm.cdf  #pdf = 0.6  #ppf  cutt off point three same parameters  print(""Normal probability for x ="", z, "":"", normal_prob)"
graphss ,"import numpy as np  / import matplotlib.pyplot as plt  / size = 100000 # population size  / pop = np.random.uniform(0,100,size) # generating the whole population  /s_size = 300 # sample size  /num_sample = 10000 # number of samples  /s_means = [np.mean(np.random.choice(pop, s_size))for i in range (num_sample)]  / plt.hist(pop, bins = 30, edgecolor = 'k', alpha = 0.7) /plt.title ('Distribution of population') / plt.xlabel ('population')  / plt.ylabel ('') /plt.axvline(np.mean(s_means), color = 'red', linestyle = 'dashed',linewidth = 1) /plt.show()  / plt.hist(s_means, bins = 30, edgecolor = 'k', alpha = 0.7) /plt.title ('Distribution of sample means')  /plt.xlabel ('sample mean')
plt.ylabel ('') / plt.axvline(np.mean(s_means), color = 'red', linestyle = 'dashed',linewidth = 1)  /plt.show()"
graphs,"import numpy as np   / import matplotlib.pyplot as plt  / from scipy.stats import norm, uniform, skewnorm /def rand_draw(dist, n, mu=None, sd=None, minmax=None, skew=None): /  if dist == ""norm"": /    return /np.random.normal(mu, sd, n)  /   elif dist == ""unif"": IND     return np.random.uniform(minmax[0], minmax[1], n)  /  elif dist == ""left_skew"": /    return skewnorm.rvs(skew, size=n) - 1 /  elif dist == ""right_skew"":/     return /skewnorm.rvs(skew, size=n) + 1  ///// title = [""Normal Distribution"", ""Uniform Distribution"", ""Left Skew Distribution"", ""Right Skew Distribution""] / for i in range(len(title)):  /  dist = input(""Choose the distribution (norm, unif, left_skew, right_skew): "")  /  n = int(input(""Enter the sample size (n): ""))  /  k = int(input(""Enter the number of samples (k): "")) ////   if dist == ""norm"": /    mu = float(input(""Enter the mean: "")) /    sd = float(input(""Enter the standard deviation: "")) /    minmax = None /    skew = None /  elif dist == ""unif"": /    min_val = float(input(""Enter the lower bound: "")) /    max_val = float(input(""Enter the upper bound: "")) /    minmax = [min_val, max_val]     mu = None /     sd = None /    skew = None /  elif dist == ""left_skew"" or dist == ""right_skew"": /    skew_type = input(""Enter the type of skew (low, medium, high): "").lower() /    skew_dict = {""low"": -5, ""medium"": -10, ""high"": -15} if dist == ""left_skew"" else {""low"": 5, ""medium"": 10, ""high"": 15} /    skew = skew_dict.get(skew_type, 0) /    mu = None  /    sd = None /     minmax = None  ///// np.random.seed(42) /population = rand_draw(dist, 100000, mu=mu, sd=sd, minmax=minmax, skew=skew) /plt.figure(figsize=(8, 6)) /plt.hist(population, bins=45, density=True, color='#195190', edgecolor='white', alpha=0.7) /plt.title(f""Population distribution: {dist}"") /plt.xlabel('x') /plt.ylabel('Density') / sample_means = [np.mean(np.random.choice(population, n, replace=True)) for i in range(k)] /plt.figure(figsize=(8, 6)) /plt.hist(sample_means, bins=20, density=True, color='#009499', edgecolor='white', alpha=0.7) /plt.title(f""Sampling Distribution (n={n}, k={k})"") /plt.xlabel('Sample means') /plt.ylabel('Density') /\plt.show()"
Poissonlab ," rate = tim hortons 5 pan per hour / from scipy.stats import poisson / poisson.pmf(k=1 , mu=5)  selling 1 pan in 1 hr / selling 8 pan in 2 hrs poisson.pmf(8,10)/  calculate the comulative pf receiving 15 or fewrr orders in a 10 orders a day = poisson.cdf(15,10) // 12 or more orders in a day 10 avg orders per day   1- poisson.cdf(12,10)"
